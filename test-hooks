#!/usr/bin/python
'''Test the various package hooks.'''

import unittest, subprocess, tempfile, os, shutil, os.path, sys
import apport, apport.fileutils

class _HooksTest(unittest.TestCase):
    def setUp(self):
        self.orig_report_dir = apport.fileutils.report_dir
        apport.fileutils.report_dir = tempfile.mkdtemp()
        os.environ['APPORT_REPORT_DIR'] = apport.fileutils.report_dir

        self.workdir = tempfile.mkdtemp()

    def tearDown(self):
        shutil.rmtree(apport.fileutils.report_dir)
        apport.fileutils.report_dir = self.orig_report_dir 

        shutil.rmtree(self.workdir)

    def test_package_hook_nologs(self):
        '''Test package_hook without any log files.'''

        ph = subprocess.Popen(['bin/package_hook', '-p', 'bash'],
            stdin=subprocess.PIPE)
        ph.communicate('something is wrong')
        self.assertEqual(ph.returncode, 0, 'package_hook finished successfully')

        reps = apport.fileutils.get_new_reports()
        self.assertEqual(len(reps), 1, 'package_hook created a report')

        r = apport.Report()
        r.load(open(reps[0]))

        self.assertEqual(r['ProblemType'], 'Package')
        self.assertEqual(r['Package'], 'bash')
        self.assertEqual(r['SourcePackage'], 'bash')
        self.assertEqual(r['ErrorMessage'], 'something is wrong')

    def test_package_hook_logs(self):
        '''Test package_hook with a log dir and a log file.'''

        open(os.path.join(self.workdir, 'log_1.log'), 'w').write('Log 1\nbla')
        open(os.path.join(self.workdir, 'log2'), 'w').write('Yet\nanother\nlog')

        ph = subprocess.Popen(['bin/package_hook', '-p', 'bash', '-l',
            os.path.realpath(sys.argv[0]), '-l', self.workdir],
            stdin=subprocess.PIPE)
        ph.communicate('something is wrong')
        self.assertEqual(ph.returncode, 0, 'package_hook finished successfully')

        reps = apport.fileutils.get_new_reports()
        self.assertEqual(len(reps), 1, 'package_hook created a report')

        r = apport.Report()
        r.load(open(reps[0]))

        filekey = None
        log1key = None
        log2key = None
        for k in r.keys():
            if k.endswith('Testhooks'):
                filekey = k
            elif k.endswith('Log1log'):
                log1key = k
            elif k.endswith('Log2'):
                log2key = k

        self.assert_(filekey)
        self.assert_(log1key)
        self.assert_(log2key)
        self.assert_('0234lkjas' in r[filekey])
        self.assertEqual(len(r[filekey]), os.path.getsize(sys.argv[0]))
        self.assertEqual(r[log1key], 'Log 1\nbla')
        self.assertEqual(r[log2key], 'Yet\nanother\nlog')

unittest.main()
