apport (0.45) UNRELEASED; urgency=low

  New feature: Infrastructure for package install/upgrade failures:

  * Add bin/package_hook: Script for creating a report for a package
    installation/upgrade failure. It receives a package name, a number of log
    files, and an ErrorMessage: from stdin. This will be called from e.g.
    dist-upgrader.
  * setup.py, debian/apport.install: Ship package_hook.
  * apport/ui.py: If ProblemType is 'Package', call a new function
    self.ui_present_package_error() instead of presenting a crash. Add test
    suite checks for the package error report workflow.
  * gtk/apport-gtk{,.glade}: GTK implementation of ui_present_package_error().

  New feature: Maintain a per-binary blacklist to inhibit apport crash reports
  until the binary changes. Closes: LP#79408

  * apport/report.py: Add new Report methods check_ignored() and mark_ignore()
    to check for/set ignore list entries. Add test cases.

  Bug fixes:

  * gtk/apport-gtk: Fix return code for restarting the application ('reopen' ->
    'restart'). Closes: LP#81422
  * test-apport: Adapt to new core_pattern kernel interface mode:
    - Check core_pattern instead of the obsolete crashdump sysctl to determine
      whether or not apport is running.
    - Give apport max. 10 seconds to complete. The current kernel reaps the
      crashed process as soon as writing the core dump to the pipe is
      finished, but apport still needs to write the report file.
    - Do not EXFAIL the test for crashes in nonwriteable cwd any more, since
      it is now supposed to work (we do not write a core dump to the disk any
      more).
  * run-tests, use-local: Adapt to new core_pattern kernel interface.
  * apport: Improve logging of exceptions, include environment variables.
  * apport/report.py test suite: Use gdb to generate a test core dump, do not
    rely on kill(SIGSEGV) and the kernel to do it (since we now use a pipe in
    core_pattern).
  * backends/packaging-dpkg.py: Fix return value of get_modified_files() if
    dpkg .list file is missing.
  * apport/report.py, add_package_info(): Do not produce stray empty lines for
    uninstalled alternative dependencies.
  * apport/report.py: Fix test_add_gdb_info_script() to not leave behind a
    stray gzip process which randomly blocks stdin.
  * backends/packaging-dpkg.py: Do not read the dpkg status in the
    constructor, but lazily initialize it when actually calling a query
    function. This avoids imposing the dpkg-query overhead for programs that
    import the apport package without doing package queries (such as any
    Python program under Ubuntu, due to the Python crash hook).

  Code cleanups:
  * apport/report.py test suite: Refactorize generation of test crash program
    and core dump generation.
  * Consistently use 'in'/'not in' instead of find() for substring searches.
  * Changed the packaging backend import, so that its methods can now be
    accessed at apport.packaging instead of apport.packging.impl.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Sat, 27 Jan 2007 16:12:36 +0100

apport (0.44) feisty; urgency=low

  Some more 'Need for Speed' optimizations:

  * backends/packaging-dpkg.py, _check_files_md5(): Also accept a md5sum
    string in addition to a md5sum file.
  * backends/packaging-dpkg.py, get_modified_files(): Compare package file's
    ctime and mtime against the package list file's mtime and only md5sum the
    files that are newer. This drastically reduces the amount of md5suming
    (usually to zero) and thus speeds up the information collection.
  * backends/packaging-dpkg.py: Use a single hackish 'dpkg-query --show *'
    as a portable variant of 'cat /var/lib/dpkg/status' to pre-fill the status
    cache with all packages instead of calling dpkg -s on every single package
    we query. This changes the time for figuring out dependencies and their
    versions from 'unbearable for many packages' to 'barely noticeable'.

  New feature: per-package apport hooks to collect additional information:

  * apport/report.py: Add method add_hooks_info() which executes a function
    add_info(report) from /usr/share/apport/<package>.py. Also add
    appropriate test cases. This provides per-package hooks for apport.
  * apport/ui.py: Call add_hooks_info() in the information collection thread.

  Bug fixes:

  * apport/report.py: Add some more test cases for _check_interpreted() for
    Python scripts.
  * apport/python_hook.py: Check for a correct ExecutablePath in
    test_general().
  * apport/python_hook.py: Use fileutils.likely_packaged() instead of
    checking for /tmp and home, so that we ignore stuff in /usr/local, too.
    Closes: LP#81244
  * apport/python_hook.py: If we figure out an ExecutablePath which is not
    actually an executable, do not create a report. This particularly affects
    interactive python sessions where sys.argv[0] is empty and thus
    ExecutablePath ends up being the current directory. Add test cases.
    Closes: LP#81237

 -- Martin Pitt <martin.pitt@ubuntu.com>  Wed, 24 Jan 2007 17:16:04 +0100

apport (0.43) feisty; urgency=low

  * apport/ui.py: Add method create_crash_bug_title() to construct a
    reasonable standard bug title for crash reports, so that the automatic
    duplicate detection actually has a chance to work. Also add test cases for
    various signal crashes and an unhandled Python exception.
  * apport/ui.py, file_report(): Submit a default bug title for crash reports.
    Closes: LP#79657

 -- Martin Pitt <martin.pitt@ubuntu.com>  Tue, 23 Jan 2007 16:26:40 +0100

apport (0.42) feisty; urgency=low

  New feature: https://wiki.ubuntu.com/ApportImprovements (kernel interface
  change):

  * bin/apport: Support calling without arguments, to support new semantics
    agreed in the ApportImprovements spec: macro values (in particular, pid
    and signal number) are passed as environment variables.
  * preloadlib/libapport.c: Simulate new kernel behaviour described above.
  * debian/apport.init: Set the kernel's core_pattern sysctl to pipe to apport
    if the edgy-style 'crashdump-helper' sysctl helper does not exist.

  Bug fixes:

  * bin/apport-retrace: Beautify error message when report file is not
    accessible. Closes: LP#79568
  * apport/ui.py: Fix crash in the bug pattern search thread if we could
    not determine a package name. Closes: LP#77872
  * bin/apport: Only unlink the core dump if it still exists. Closes: LP#80866
  * gtk/apport-gtk.glade: Fix expand/fill attributes so that the expander gets
    all the space when resizing the window. Closes: LP#80987
  * problem_report.py, write_mime(): Make sure that multi-line values that go
    to the summary are terminated with a newline.
  * apport/ui.py: Fix error message invocation for reporting cloakroom upload
    failure.
  * problem_report.py, write_mime(): Fix off-by-one comparison of the 'inline
    text' treshold, so that apport's StacktraceTop field appears in bug
    summaries. Also fix a corner case in CR line ending handling. Check both
    things in the test suite.
  * gtk/apport-gtk: Add missing 'import subprocess.'. Closes: LP#81007
  * debian/control: Bump apport's and apport-gtk's dependency to python-apport
    to make sure that apport.ui is available. Closes: LP#81019
  * apport/ui.py: Add missing 'import pwd'. Closes: LP#81033

  Minor improvements:

  * apport/ui.py: Get the cloakroom ticket number from the
    X-Launchpad-Blob-Token HTTP header instead of parsing the resulting page.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Tue, 23 Jan 2007 11:27:20 +0100

apport (0.41) feisty; urgency=low

  New feature: Use Malone cloakroom for uploading reports. Closes: LP#70919

  * gtk/apport-gtk.glade: Redesign bug reporting dialog to have a 'Create bug
    report' and a 'Cancel' button. Also assign GTK_RESPONSE_* constants to the
    dialog buttons. Go back to Glade 2 since Glade 3 still sucks too much.
  * gtk/apport-gtk: Adjust workflow for sending report to Malone cloakroom
    instead of asking the user to attach the file. Sending is not yet
    implemented, though.
  * gtk/apport-gtk: Do not show any dialogs any more when filing a bug.
  * Add apport/MultipartPostHandler.py: This module provides an urllib2 opener
    for uploading file attachments to forms over HTTP POST. This module is
    (C) 2006 Will Holcomb <wholcomb@gmail.com> and was taken from
    http://odin.himinbi.org/MultipartPostHandler.py. (This is a serious hole
    of the Python standard library IMHO.)
  * apport/ui.py, file_report(): Upload blob to Malone (edge.launchpad.net for
    now), retrieve the ticket, and pass it to +filebug.

  Refactorizations:

  * gtk/apport-gtk: Major refactorization to use modal dialogs and run()
    instead of loosely coupled event handlers.
  * Add apport/ui.py: Abstract frontend which encapsulates the logic, workflow
    and UI independent bits and provides UI hooks for concrete
    implementations. This both makes it easy to write more frontends like Qt
    or CLI, and also makes the code automatically testable. Add an extensive
    testsuite.
  * run-tests: Add ui.py testsuite.
  * gtk/apport-gtk: Port to ui.py's UserInterface (which means moving 1/3 of
    the code into the new ui_*() methods and throwing away the rest).
  * Add apport/REThread.py: Enhanced threading.Thread class that can propagate
    the return value and uncaught exceptions of run() to the calling thread.
  * apport/ui.py: Get rid of thread_check_bugpatterns() and hackish exception
    handling, rewrite using REThread.
  * apport/ui.py, gtk/apport-gtk: Add progress bar to report upload. It is
    indefinite for now, because neither urllib2 nor httplib support upload
    progress.

  Bug fixes:

  * gtk/apport-gtk.glade: Merged Gnome HIG fixes from Sebastian Heinlein,
    thank you!
  * Merge patch from Sebastian Heinlein to properly treat the apport-gtk icon
    the dh_iconcache way and make it themeable. Thank you!
  * gtk/apport-gtk: Remove periods from primary dialog texts to comply with
    Gnome HIG standards.
  * backends/packaging-dpkg.py, get_file_package(): Process list files in
    chunks of 100, so that we do not exceed the maximum command line length if
    there is a large number of packages installed. Closes: LP#64839
  * gtk/apport-gtk: Use pgrep with -u instead of pidof for testing whether the
    crashed process is already running again, so that we do not match
    processes of other users. Add procps package dependency for this.
  * gtk/apport-gtk: Only offer to restart programs that are in the $PATH. E.
    g. /usr/lib/firefox/firefox-bin cannot be called directly.
    Closes: LP#79623
  * apport/report.py: Disassemble 16 instructions instead of 32 bytes to
    become independent of the instruction size. Thanks to Kees Cook for the
    patch!

 -- Martin Pitt <martin.pitt@ubuntu.com>  Mon, 22 Jan 2007 10:47:33 +0100

apport (0.40) feisty; urgency=low

  * debian/control: Add missing python-dev build dependency, which is
    apparently required for 2.5 now.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Mon, 15 Jan 2007 11:06:20 +0100

apport (0.39) feisty; urgency=low

  * Introduce abstract packaging interface and move all dpkg/apt specific bits
    to a dpkg implementation of this packaging interface (merge
    apport/abstract-pkg branch):
    - Add apport/packaging.py: Abstract packaging system query interface.
    - Add backends/packaging-dpkg.py: dpkg implementation of abstract
      packaging interface.
    - run-tests: Run tests of all backends.
    - apport/fileutils.py, apport/report.py: Port to packaging.py interface.
    - debian/control: Drop python-apport's 'python-apt' dependency since the
      backend only uses dpkg now (without measurable performance penalty since
      it uses internal caching).
    - debian/rules: Install backends/packaging-dpkg.py as our packaging
      backend to apport/packaging_impl.py and remove it again on clean.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Sat, 13 Jan 2007 15:53:08 +0100

apport (0.38) feisty; urgency=low

  * Add ./COPYING: GPL license.
  * debian/rules: Build POT file again.
  * apport/fileutils.py: Add get_all_system_reports() and
    get_new_system_reports() and added test cases. Now the test suite can also
    be run as root to be able to actually check their complete behaviour.
    Adapt the other tests to get along with running the tests as root.
  * bin/apport-checkreports: Add option --system to check for system crash
    reports. Closes: LP#62316
  * gtk/apport-gtk: If called through sudo to process system crashes, drop
    privileges to the original user in open_url() so that we get the web
    browser correctly. (LP#62316) Caveat: The user cannot actually attach the
    crash report file directly since it is not accessible to the user; this
    will get fixed once Malone is able to link a bug report with uploaded
    blobs.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Fri, 12 Jan 2007 14:29:44 +0100

apport (0.37) feisty; urgency=low

  * problem_report.py: Remove the requirement that values must not contain
    empty lines. Add test cases that reading and writing values with empty
    lines works, and add a test case that load() properly complains about
    empty lines in debcontrol encoding (empty lines in values are encoded with
    a single space). Closes: LP#78094
  * apport/report.py test suite: Do not rely on a particular structure of the
    'cat' stacktrace; apparently this is not consistent across architectures.
    Instead, compile a segfaulting mini C program, let it dump core, and test
    add_gdb_info() on it instead. This also allows us for a more rigid check
    of StacktraceTop.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Mon,  8 Jan 2007 14:44:08 +0100

apport (0.36) feisty; urgency=low

  * gtk/apport-gtk.glade: Restore pulse step of progress bar (this apparently
    got destroyed when saving with Glade 3).
  * gtk/apport-gtk{,.glade}: Terminate the program properly when closing the
    progress dialog instead of exiting with an exception.
  * gtk/apport-gtk: Defer opening of the bug reporting window a bit so that
    it appears on top of the browser window. Also enable the task bar blinking
    for it when it is in the background.
  * gtk/apport-gtk.glade: Restore vertical padding of bug report dialog labels
    (another Glade 3 transition regression).
  * bin/apport-retrace, apport/report.py: Call gdb on InterpreterPath if
    present; calling it on a script does not yield anything useful. Add a test
    case to report.py.
  * debian/apport.init: Use mkdir -p instead of install -d, since install is
    not in /bin. Thanks to Kees Cook for catching this.
  * debian/control: Add missing python-apport dependency 'python-apt', which
    is not caught by ${python:Depends}.
  * gtk/apport-gtk: Catch MemoryError when loading a report and display an
    error dialog instead of just crashing. Closes: LP#76235
  * gtk/apport-gtk: Properly catch exceptions from the bug pattern check
    thread to avoid useless backtraces like in bug #75160.
  * gtk/apport-gtk: Catch exceptions from decoding of damaged reports and
    display an error message instead of crashing. Closes: LP#77149
  * apport/report.py: Add missing import of 'time' to test suite.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Fri,  5 Jan 2007 09:49:01 +0100

apport (0.35) feisty; urgency=low

  Optimizations:

  * apport/fileutils.py: Split out heuristics for determining whether a file
    belongs to a package to new function likely_packaged() and add test cases.
  * bin/apport: Do not use the expensive find_file_package() any more, use
    likely_packaged() instead. This will create initial reports in some
    corner cases (like custom non-packaged executables in /usr/bin/), but
    greatly reduces I/O impact at crash time. We rely on apport-gtk to deal
    with reports that do not actually belong to a packaged executable.
  * apport/report.py, add_gdb_info(): Call gdb just once and split the output
    instead of calling it again for each command. This should significantly
    speed up the gdb stage especially for large programs/core dumps.
  * Use cStringIO instead of StringIO in modules.
  * gtk/apport-gtk: Code cleanup and refactorization:
    - Move iteration over crash reports into __main__ to simplify housekeeping
      in the ApportGTK class and get rid of some functions.
    - Refactor creation of temporary report file.
  * gtk/apport-gtk.glade: Split the text in the progress bar dialog so that we
    can use it for multiple steps (like uploading data to Malone) while not
    breaking translations.

  New feature: Bug reporting tool (https://wiki.ubuntu.com/BugReportingTool)

  * gtk/apport-gtk: Split out crash report initialization to new function
    show_crashes() so that we can use the frontend for other purposes like bug
    reporting.
  * gtk/apport-gtk: Add --file-bug, --package, and --pid options; if given,
    create a bug report about the given package instead of viewing crash
    reports.
  * gtk/apport-gtk{,.glade}: Generalize some strings to not talk about 'crash'
    any more, to make them suitable for bug reporting, too.
  * gtk/apport-gtk: Support --file-bug without specifying a package or a PID
    for filing generic distro bugs.
  * problem_report.py: Add new method write_mime() to encode a problem report
    in MIME/Multipart RFC 2822 format (i. e. an email with attachments). Short
    values are aggregated into the first inline text/plain part, large values,
    binary values, and file references get gzip compressed separate
    attachments. Also add various test cases.

  Bug/crash information:

  * apport/report.py, add_user_info(): Add list of system groups that the user
    belongs to.
  * bin/apport: Call add_user_info(), check functionality in test-apport.
  * apport/report.py, add_gdb_info(): Add field 'StacktraceTop' with the top
    five functions on the stack and no local variables. This reduced 'glimpse'
    is suitable for inline display in bug reports and automatic processing
    (dup finders, etc).

  Bug fixes:

  * po/Makefile: Add top_srcdir to work with current intltool.
  * po/de.po: Unfuzz some strings.
  * apport/report.py, add_gdb_info(): Strip away the 'No symbol table info
    available' messages from stack traces.
  * apport/report.py, test_search_bug_patterns(): Use security.u.c. instead
    of archive.u.c., since the latter times out too often.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Wed,  3 Jan 2007 16:45:20 +0100

apport (0.34) feisty; urgency=low

  * apport/fileutils.py, mark_report_seen(): Do not bail out if os.utime()
    fails due to access permissions. This happens if the file does not belong
    to the user calling apport-gtk, but is world-readable (such as ubiquity
    crash reports). If utime() fails, repeatedly open()/close() the file for
    reading until atime != ctime, or the 1.2s timeout is reached.
    Closes: LP#72250
  * apport/python_hook.py: Add unit test, call that in run-tests.
  * apport/python_hook.py: Chmod the generated report to 0600 to not expose
    potentially private data to the world, and to be consistent with other
    crash reports.
  * apport/fileutils.py: Add check_files_md5() and test cases.
  * apport/report.py, add_package_info(): Append list of modified package
    files to Package: and Dependencies: value. Closes: LP#70946
  * bin/apport-retrace: Get along with Package:/Dependencies: fields with list
    of modified files.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Fri, 22 Dec 2006 12:40:55 +0100

apport (0.33) feisty; urgency=low

  * debian/rules: Convert to cdbs. This fixes the dh_pysupport invocation
    along the way, too.
  * gtk/apport-gtk: Rework web browser invocation: Use kfmclient if available,
    fall back to firefox-remote, then to webbrowser.open(). Do not call
    x-www-browser any more since this would block if no running browser was
    open before.
  * Drop the apport_utils module (and with it the python-apport-utils
    package), it became too much of a dumping ground. The report file handling
    functions now live in apport.fileutils, and the debugging information
    collectors are now methods of a new 'Report' class (subclass of
    ProblemReport) in the new apport.report module. Adjust all programs
    accordingly.
  * Add debian/python-apport.postinst: Remove old .pyc and .pyo cruft on
    upgrades to clean up after our broken dh_pysupport invocation in earlier
    versions, so that the new modules are actually used.
  * Remove debian/apport.postinst: Those cleanups were only necessary for
    intra-edgy upgrades.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Tue, 19 Dec 2006 01:15:27 +0100

apport (0.32) feisty; urgency=low

  * apport_utils.py: Filter out "no debugging symbols found" warnings from gdb
    outputs, and add some tests for this. Thanks to Kees Cook for the patch!
  * test-apport: Fix AGENTPATH directory when building the preload library
    (recently moved to bin/).
  * use-local: Fix path to apport as well (recently moved to bin/).
  * apport-retrace: Use ldd on InterpreterPath if present; ldd'ing scripts
    will not get us very far. Closes: LP#72201

 -- Martin Pitt <martin.pitt@ubuntu.com>  Thu, 14 Dec 2006 13:42:58 +0100

apport (0.31) feisty; urgency=low

  * Move scripts to bin/ in source package.
  * Add apport/python_hook.py: Default exception handler for Python, to create
    apport reports for unhandled exceptions. Thanks to Robert Collins
    <robert@ubuntu.com> for this! Closes: LP#70957
  * Add new package python-apport to ship the new Python package 'apport'.
    This includes the python crash hook for now, but in the near future
    apport-utils will get redesigned and put into this package, too.
  * debian/control: apport now depends on python-apport instead of
    python-apport-utils.
  * apport_utils.py: Quiesce gdb error messages in test suite.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Sat, 25 Nov 2006 12:30:41 +0100

apport (0.30) feisty; urgency=low

  * test-apport, use-local: Support both kernel 2.6.17 and 2.6.19 sysctl names
    (crashdump-helper vs. crashdump).
  * gtk/apport-gtk.glade: Improve dialog title capitalization.
    Closes: LP#70652.
  * debian/apport.cron.daily: Immediately exit if /var/crash does not exist.
    Create /var/crash in debian/apport.init if it does not exist.
    Closes: LP#71599
  * Convert all tabs in Python source code files to spaces to comply to PEP 8.
    Thanks to Robert Collins for pointing this out.
  * apport_utils.py, gtk/apport-gtk: Do not pass None to subprocess arguments
    if report belongs to a non-packaged program. Thanks to Robert Collins for
    discovering and fixing this! Closes: LP#70942
  * debian/apport.init: Change /var/crash permissions to 1777, so that custom
    crash handlers (in Python/Mono/etc.) can put reports there.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Sat, 25 Nov 2006 10:44:33 +0100

apport (0.29) feisty; urgency=low

  * apport-retrace: Do not crash if a linked library is not a dependency.
    Closes: LP#65914
  * apport_utils.py:
    - Add test_find_file_package_diversion() selftest to check diversion
      handling.
    - find_file_package(): Check for and respect diversions.
    - Closes: LP#65917
  * debian/apport.init, test-apport, use-local: Adapt to 'crashdump-helper' ->
    'crashdump' sysctl renaming in 2.6.19.
  * test-apport: Restore cwd even when failing a test.
  * problem_report.py, ProblemReport.write(): Support file-like objects as
    argument of file references to support direct reading from pipes. Add test
    case test_write_fileobj().
  * apport: Support '-' as core file argument, in which case the core will be
    read from stdin. This paves the way for using Linux 2.6.19's 'pipe
    core_pattern' feature. Bump python-problem-report dependency to >= 0.29
    for this.
  * apport: Confine permissions of log file to root:adm 0640, just in case.
  * apport: Temporarily drop real u/gid to target user for the os.access()
    tests, so that normal users cannot verify the existence of a given
    inaccessible file. Add comprehensive tests to apport_utils' test suite and
    test-apport. Thanks to Kees Cook for this patch!
  * apport_utils.py, find_file_package(): Terminate fgrep options with '--' to
    avoid problems with funny file names. Thanks to Kees Cook for spotting
    this!
  * test-apport: Automatically detect whether ULIMIT_CORE is nonzero, and
    adapt tests accordingly: check that core still exists after invoking
    apport, and clean it up.
  * apport-retrace: Add new mode -g/--gdb which starts an interactive gdb
    session with the report's core dump. Add this to man/apport-retrace.1, too.
  * apport-retrace: If -c is given, completely remove the CoreDump field from
    the report instead of setting it to 'removed'.
  * test-apport: When using 'lib' mode, point APPORT_LOG_FILE to a temporary
    file. Print it if the test suite fails.
  * test-apport: Fix EXFAILure of the 'core dump works for non-writable cwds'
    test case.
  * preloadlib: Support -DPIPE_CORE mode which emulates the
    pipe-in-core_pattern mode of kernel 2.6.19.
  * test-apport: Build preload library with core piping. No more failed test
    suite checks in 'lib' mode.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Sun,  5 Nov 2006 07:10:30 -0800

apport (0.28) edgy; urgency=low

  "No core - ignore!"

  * apport: Do not create a report for crashes which we do not get a core dump
    for. The reports are useless and only clutter our bug tracker.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Mon,  9 Oct 2006 15:22:32 +0200

apport (0.27) edgy; urgency=low

  * apport: Ignore SIGABRT for now; it's usually signalled from abort() or
    assertion failures and we only get reports with unusable stack traces for
    it (see #61938).
  * gtk/apport-gtk: If gnome-open is not available, fall back to x-www-browser
    instead of using webbrowser.py, to respect default browser in XFCE.
    Closes: LP#64209
  * apport: use os.nice() instead of executing 'renice'. Thanks to Benoit
    Boissinot for noticing.
  * apport_utils.py, find_file_package(): Lower() both strings in the speedup
    heuristics to match e. g. /usr/bin/Xorg -> xserver-xorg. Thanks to Kees
    Cook!
  * apport_utils.py, report_add_package_info(): Do not crash if we encounter a
    'None' current version, which can happen with uninstalled alternative
    dependencies. Thanks to Kees Cook for tracking this down!

 -- Martin Pitt <martin.pitt@ubuntu.com>  Fri,  6 Oct 2006 17:15:08 +0200

apport (0.26) edgy; urgency=low

  * apport-retrace: Clean up code a bit:
    - Move option parsing to separate function.
    - Use apport_utils' report_add_gdb_info() instead of duplicating the gdb
      code.
  * apport_utils.py, report_add_gdb_info(): Add optional parameter 'debugdir'
    to specify an alternate debug file symbol root directory.
  * apport-retrace: Add option -d/--download-debug to automatically download
    available ddebs, create a temporary debug symbol directory from already
    installed and downloaded ddebs, and point gdb to use that. Also add option
    -C/--cache-dir to specify a permanent ddeb cache directory (by default, a
    temporary one is used). Update the manpage accordingly.
  * apport-retrace: Make the best out of a report without packaging
    information (which can happen if the user does not click on 'report bug'
    in apport-gtk).
  * apport_utils, report_add_proc_info():
    - Move heuristics for detecting interpreted scripts to a separate function
      to be able to provide separate test cases for it. Check a few more
      special cases for mono programs.
    - Make interpreter heuristics even scarier to detect some more mono corner
      cases (like banshee and beagled-helper). Closes: LP#58859

 -- Martin Pitt <martin.pitt@ubuntu.com>  Wed,  4 Oct 2006 19:10:47 +0200

apport (0.25) edgy; urgency=low

  * Drop apport-gtk's update-notifier dependency to a Recommends:.
  * apport_utils.py, report_add_gdb_info(): Add register dump and disassembly
    of the last 32 bytes, they might be useful to see what's going on
    sometimes. Thanks to Kees Cook for the idea and the patch.
  * test-apport, check_crash(): Verify that a crash does not leave a core file
    behind. (Test for LP#62972)
  * preloadlib/libapport.c: Do not unlink the core file after calling apport,
    but set REMOVE_CORE=1 environment instead. This matches the current
    kernel behaviour.
  * apport: Register an atexit handler as early as possible for unlinking the
    core dump if REMOVE_CORE environment is set. Closes: LP#62972
  * apport: Set nice level 10 instead of 5. Closes: LP#63099

 -- Martin Pitt <martin.pitt@ubuntu.com>  Mon,  2 Oct 2006 14:21:53 +0200

apport (0.24) edgy; urgency=low

  The "Need for speed" release -- rrrroarrr!

  * apport: Remove _copy_shrink_corefile(): While this has an enormous impact
    on the size of an uncompressed core dump, it only causes a negligible size
    reduction of the bzip2'ed core, but it needs a lot of I/O resources for
    large core dumps.
  * problem_report.py:
    - Use zlib instead of bzip2 for compressing the binary data (in
      particular, core dumps). This results in slightly bigger files, but speeds
      up compression a lot (30 seconds vs. ~2:45 minutes for a Firefox core dump
      on my slow iBook). Closes: LP#61538
    - ProblemReport.read(): Support both bzip2 and zlib compression to be able
      to read existing reports, too.
    - Add/Adapt test cases.
  * Move InformationCollector._get_gdb() from apport to apport_utils.py
    report_add_gdb_info(), and add a test case for it.
  * apport_utils.py, report_add_package_info(): Support calling without a
    package name, then it will be figured out from ExecutableName. Extend test
    case accordingly.
  * test-apport: Do not require apport reports to contain gdb, packaging, and
    OS information, since we are going to move them out of apport.
  * apport: Do not collect static information. It requires a lot of CPU and
    I/O resources and slows down the machine a lot, and it can be added to
    the report later in the frontend. This also gets rid of the entire
    InformationCollector class, since everything has been moved to
    apport_utils.py now. Closes: LP#62542
  * apport: Do not intercept KeyboardInterrupt as unhandled exception (only
    useful for command line debugging, though).
  * problem_report.py: Add test case for appending new data to an existing
    report, fix write() function to not rely on an existing ProblemType key.
  * problem_report.py: Add new method ProblemReport.add_to_existing() to
    update an already existing problem report with new data. Add test case.
  * apport_utils.py, mark_report_seen(): Use os.utime() instead of
    open()/read() and a timeout for simpler and faster operation.
  * gtk/apport-gtk:
    - Collect gdb/packaging/operating system information when the user chooses
      to file a bug and update the apport report.
    - Change the 'Downloading bug patterns...' progress dialog to 'Collecting
      information about the crash...'.
  * debian/control: Bumped library dependencies of apport-gtk, added
    update-notifer dependency.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Fri, 29 Sep 2006 15:47:56 +0200

apport (0.23) edgy; urgency=low

  * apport: Reset signal handler to SIG_IGN in the crash signal handler, to
    avoid an endless crash/handler loop (noticed during debugging LP#61708).
  * debian/apport.init: Do not let the script run with set -e, so that
    do_{start,stop} can deliver their return codes for proper evaluation,
    instead of immediately existing. Closes: LP#61796
  * test-apport: Check that SIGQUIT does not generate a report. (Check for
    bug #62511).
  * apport: Ignore SIGQUIT. Closes: LP#62511

 -- Martin Pitt <martin.pitt@ubuntu.com>  Thu, 28 Sep 2006 20:57:38 +0200

apport (0.22) edgy; urgency=low

  * apport_utils.py, report_add_proc_info(): Make 'interpreted script'
    detection more general to also work for mono programs.
  * test-apport: Check that non-packaged scripts do not generate a report.
  * apport: Call ic.collect_runtime_information() earlier and drop the local
    /proc/pid/exe examination, so that we get proper script detection. This
    avoids getting crash reports for non-packaged scripts (see test case
    change from above).
  * apport: Do not try to chmod the report file if we could not create it and
    output to stderr instead (this mainly affects local testing only).
  * apport_utils.py, find_file_package(): First grep the package lists whose
    names are a substring of the crashed binary name (or vice versa), to
    immensely speed up the package name determination in many cases.
  * apport: Drop the maximum number of consecutive crashes per executable
    from 5 to 2. 5 creates a too bad user experience and creates the
    impression that it will never stop. Closes: LP#61078

 -- Martin Pitt <martin.pitt@ubuntu.com>  Tue, 19 Sep 2006 16:16:46 +0200

apport (0.21) edgy; urgency=low

  * apport: Keep a partially written report with '000' permissions, and only
    chmod it to 0600 when it is fully written. This stops update-notifier from
    picking up half-written reports and get activated several times.
    Closes: LP#59988
  * apport: Add the executable path to the first line of logging.
  * apport: Run the complete code under control of the general exception
    fallback handler.
  * debian/apport.default: Increase maximum core size to 200 MB, to also catch
    Firefox and Evolution core dumps.
  * apport_utils.py, find_file_package(): Before searching the dpkg database
    (which is expensive), check if the executable path matches a whitelist of
    path prefixes. This replaces the weaker blacklist (/tmp and /home) in
    apport itself.
  * gtk/apport-gtk: Show a progress dialog while checking for bug patterns and
    execute report_search_bug_patterns() in a separate thread, so that the UI
    is not potentially blocked for a long time.
  * apport: Gracefully abort if we cannot readlink /proc/pid/exe, instead of
    falling over with an exception. Closes: LP#59993
  * debian/rules: Use 'multiuser' instead of 'defaults' for dh_installinit.
    Clean up the unnecessary rc symlinks in postinst and add appropriate
    sysv-rc dependency.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Thu, 14 Sep 2006 23:16:26 +0200

apport (0.20) edgy; urgency=low

  * apport: Renice ourself to priority 5 to not slow down the user's processes
    so heavily.
  * Add manpages for apport-retrace(1) and apport-unpack(1) and install them
    into apport. Closes: LP#58463
  * problem_report.py: Test attaching two files instead of one in the
    test_write_file() regression check to assert correct key sorting.
  * problem_report.py: Alter write() method to sort binary data to the end of
    the report. This makes reports easier to read, and also shows relevant
    information more quickly when progressively loading them in a web browser.
    Adapt regression tests accordingly.
  * Move setting of ExecutablePath from apport's InformationCollector ctor to
    apport_utils' report_add_proc_info(), where it belongs to. Check
    ExecutablePath in apport_utils' regression tests.
  * apport-unpack: Support '-' as report argument to read from stdin.
  * apport_utils.py, report_add_proc_info():
    - Apply some heuristics to determine whether the crashed process is an
      interpreted script (check if the Name in /proc/pid/status matches
      the second /proc/pid/cmdline part, and if that command line argument is
      an existing executable file). In the case of an interpreted script, set
      ExecutablePath to the script and InterpreterPath to the actually crashed
      ELF binary.
    - Test this with a shell (/bin/zgrep) and a Python (./apport-unpack)
      script in the test suite.
    - Closes: LP#58859
  * Add debian/apport.logrotate to add a daily 7-step /var/log/apport
    log rotation.
  * test-apport: Fix WCOREDUMP() and pidof checks in check_crash().
  * apport: Install a signal handler for all 'crashy' signals, which just logs
    the signal and stack info and exits. This should avoid a crashing apport
    examining itself, possibly in an endless loop. Closes: LP#58873

 -- Martin Pitt <martin.pitt@ubuntu.com>  Mon, 11 Sep 2006 09:20:18 +0200

apport (0.19) edgy; urgency=low

  * apport_utils.py: Add function report_search_bug_patterns(): Try to
    download a package specific bug pattern XML file from a given URL base
    directory and return the bug URL in case of a match. Also add extensive
    test suite check.
  * test-apport: Fix help message.
  * apport-gtk: Make use of the new report_search_bug_patterns() function and
    display appropriate instructions on match. Bump python-apport-utils dependency.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Tue,  5 Sep 2006 11:31:17 +0200

apport (0.18) edgy; urgency=low

  The "mating dance for ubiquity" release.

  * apport-gtk:
    - Use pidof's -x option in the detection whether the program is already
      running to correctly handle scripts.
    - Do not assume the presence of the ExecutablePath key in reports, but
      gracefully fall back to Package.
    - If the report specifies an explicit DesktopFile, use that instead of
      trying to figure it out.
    - Only created reduced report and show the radio buttons if there are
      actually removed fields.
    - Change tooltip of 'reduced report' radio button to be more generic (do
      not refer to the memory dump, but to 'large items', since this is what
      apport-gtk currently does).
    - Support new field 'BugDisplayMode: file | list (default)'. In 'file'
      mode, display the /+filebug page instead of /+bugs and change
      instructions accordingly.
    - Use the ProcCmdline attibute to restart an application; correctly
      parsing of all the desktop file is just not possible at this point.
    - Support new field 'RespawnCommand' to use custom respawning command.
  * problem_report.py: Add method has_removed_fields() to check whether load()
    skipped any fields due to binary=False. Add test suite check.
  * apport_utils.py: Fix the quoting in ProcCmdline so that it is fully shell
    compatible.
  * run-tests: Check if kernel crash dump helper is active, and if so, run
    test-apport in kernel mode.
  * problem_report.py: Support an optional second argument of file references
    which controls whether or not the file contents will be compressed/encoded
    (defaults to True for backwards compatibility). Add test suite checks.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Fri, 25 Aug 2006 14:01:47 +0200

apport (0.17) edgy; urgency=low

  * Move packaging information collection from apport to new function
    report_add_package_info() in apport_utils.py, add test suite check.
  * Move operating system information collection from apport to new function
    report_add_os_info() in apport_utils.py, add test suite check.
  * Move /proc information collection from apport to new function
    report_add_proc_info() in apport_utils.py, add test suite check, and fix
    handling of failed /proc/$$/environ reading.
  * preloadlib/libapport.c: Route gcore's stderr to /dev/null to suppress
    error messages during the test suite and to become more compatible to the
    kernel behaviour.
  * Change apport_utils.py to be a public module and ship it in the new
    python-apport-utils package, so that other applications like ubiquity can
    use it easily.
  * po/de.po: Add new translations to make this complete again.
  * problem_report.py, apport_utils.py: Prepend UnitTest classes with '_' so
    that they do not appear in the help() output.
  * apport_utils.py: Add make_report_path(), which constructs the canonical
    crash report pathname for a given report.
  * Add debian/apport.postinst: Remove /usr/share/apport/apport_utils.pyc when
    upgrading from an earlier version, so that the programs in
    /usr/share/apport actually use the version from p-apport-utils.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Tue, 22 Aug 2006 18:14:00 +0200

apport (0.16) edgy; urgency=low

  *  test-apport: Check that non-packaged binaries do not generate a report.
  * apport_utils.py: Add find_file_package() to find the package a file
    belongs to. This uses fgrep /var/lib/dpkg/info/*.list which is much faster
    than dpkg -S. Also add test suite check.
  * apport: Use find_file_package() instead of direct dpkg -S call and pass
    the result to the InformationCollector ctor to avoid grepping the dpkg
    lists twice.
  * apport: Immediately exit if the executable name starts with /home or /tmp,
    to avoid grepping the dpkg database in the common developer case.
  * apport: Replace 0-bytes in ProcCmdline with spaces to keep them readable.
  * apport-gtk: Offer an alternative small report (without the core dump) for
    users with slow internet connection.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Mon, 21 Aug 2006 19:34:47 +0200

apport (0.15) edgy; urgency=low

  * Add apport-unpack: Script to extract the fields of a problem report into
    separate files into a new or empty directory. Mainly useful for extracting
    compressed binary data like the core dump.
  * test-apport: Check that dumped environment only contains security
    insensitive variables.
  * apport: Filter out all environment variables but $SHELL, $PATH, and
    locale/language related ones. Closes: LP#56846
  * test-apport: Delete test report in the cleanup handler so that the
    kernel-mode test can be run multiple times without manual cleanup.
  * test-apport: Check for running apport and test executable processes in
    check_crash().
  * preloadlib/libapport.c: Improve error checking, some robustification.
  * test-apport: If using the preload library, wait a second between the test
    process invocations in the flooding test to mitigate a strange race
    condition that sometimes causes the signal handler not to be executed.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Sun, 20 Aug 2006 16:28:43 +0200

apport (0.14) edgy; urgency=low

  * preloadlib/libapport.c: Write core dump into cwd instead of /tmp to act
    like the current kernel.
  * apport_utils.py: Check APPORT_REPORT_DIR environment variable for an
    alternate crash report directory. This is mainly useful for a local test
    suite.
  * apport: Quiesce the apt module's FutureWarning.
  * preloadlib/libapport.c: Re-raise the signal instead of doing exit() so
    that the process exits with the same code as it would do without the
    library.
  * preloadlib/libapport.c: Close stdout for gcore process.
  * Add test-apport: Use preloadlib/ and APPORT_REPORT_DIR to create a
    sandboxed environment and run various apport functionality tests. Also add
    this script to run-tests.
  * apport_utils.py, delete_report(): Actually try to unlink the report before
    falling back to truncating it to zero bytes.
  * preloadlib/libapport.c: Close stderr for apport process.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Fri, 18 Aug 2006 15:46:37 +0200

apport (0.13) edgy; urgency=low

  * Do not run the test suite on build since on the buildds modifying
    file atimes does not work.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Fri, 18 Aug 2006 00:59:26 +0200

apport (0.12) edgy; urgency=low

  * apport-gtk: Make bug report window resizable when the details are
    expanded. Closes: LP#56672
  * apport_utils.py: Add get_recent_crashes() and a test suite check for it.
  * apport: If the same binary produced more than 5 crashes in the last 24
    hours, ignore the crash. This is a hideous and pretty ad-hoc band-aid to
    avoid flooding users with reports for continuously crashing respawning
    processes. Closes: LP#56362
  * apport: Clean up exit codes to only exit with 0 if report was created, and
    with 1 otherwise (to become more compatible to proposed future kernel
    behaviour, where core dumps are only generated on demand).
  * Add run-tests script which calls all available selftests.
  * debian/rules: Run run-tests during build to have the package FTBFS on
    regressions. Add python build dependency for this (it is already there
    implicitly anyway).

 -- Martin Pitt <martin.pitt@ubuntu.com>  Thu, 17 Aug 2006 16:06:41 +0200

apport (0.11) edgy; urgency=low

  * gtk/apport-gtk.glade: Remove separators from dialogs. Closes: LP#56326
  * apport:
    - Move information collection from ctor to two new separate functions
      collect_runtime_information() (fast, privileged, crashed process must
      exist) and collect_static_information() (slow, unprivileged, crashed
      process does not need to exist). This allows a cleaner design.
    - Add missing close() call in init_error_log().
    - Do not catch SystemExit in the final catch-all-and-log clause (will
      become important once we switch to master/slave processes).
    - Clean up handling of temporary files.
    - Log successful report creation with file and package name, to ease
      debugging.
    - transitive_dependencies(): Do not break on pure virtual dependencies
      (like perl-api-XXX).
  * Add debian/apport.default: Default file to disable apport entirely and to
    change the maximum size of kernel created core dumps.
  * debian/apport.init: Evaluate new default file.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Wed, 16 Aug 2006 17:05:19 +0200

apport (0.10) edgy; urgency=low

  * apport-gtk: Show report file size in bug report window.
  * apport: Correctly handle relative paths to core dumps (use crashed
    process' cwd).
  * Fix the GPL URLs in source file's copyright comments.
  * debian/apport.cron.daily: Add -mindepth 1 to find commands to avoid
    attempting to remove the /var/crash/ directory. Closes: LP#55107
  * problem_report.py:
    - Fix precise whitespace handling in continuation lines, add selftest.
    - Add selftest for reading a report, modifying fields, and writing it
      back.
    - Fix writing back binary data, adapt test suite to check it.
    - Fixed ProblemReport.load() to clean up old data, added selftest.
    - Restructure class to inherit from IterableUserDict and throw away all
      the now obsolete dictionary wrapper methods.
  * debian/apport.init: Add colon to description to make output less
    confusing.
  * Add apport-retrace and install it into apport: This tool takes a crash
    report and refreshes the stack traces in it. This is particularly useful
    if debug symbols are installed now, but haven't been at the time the crash
    occured.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Fri, 11 Aug 2006 15:40:05 +0200

apport (0.9) edgy; urgency=low

  * apport: Call objcopy to throw out READONLY/CODE sections from the core
    dump, which drastically reduces its (uncompressed) size (factor 2 to 10).
    This has little effect on the bzip2'ed core dump, though.
  * apport:
    - Support an optional third command line argument which specifies the
      location of a core dump.
    - If a core dump is given, call gdb on the core dump instead of the
      crashed process. We cannot attach to the latter if we are called by the
      kernel (since the crashed process is in uninterruptible kernel sleep).
    - If no core dump is given, do not attempt to do anything gdb related.
    - This matches the future behaviour of the kernel crash dump helper while
      remaining compatible to the previous call semantics.
  * Add preloadlib/{Makefile,libapport.c}: LD_PRELOADable library which
    emulates the future kernel behaviour. This is ONLY for testing and
    development purposes. It uses unsafe temporary file handling and thus must
    not be used on production boxes!
  * Ship preloadlib/* as examples in package 'apport' for people who want to
    play with it until the new kernel arrives.
  * Add preloadlib/README: Explain how to use the preload library.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Wed,  9 Aug 2006 12:12:20 +0200

apport (0.8) edgy; urgency=low

  * apport_utils.py:
    - Add two new functions seen_report() and mark_report_seen().
    - get_new_reports(): Only return unseen reports, add function
      get_all_reports() for the old behaviour.
  * gtk/apport-gtk.py: Do not delete reports after notifying about them. This
    way, we do not need to add another button to save the report (which is
    considered evil UI-wise), but still retain the report for filing and
    examining later.
  * Replace all usages of '/var/crash' to a new global variable in
    apport_utils; this is particularly useful for test suites.
  * apport.py: Overwrite old reports if they are seen.
  * apport_utils.py: Add a test suite for all exported functions.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Tue,  8 Aug 2006 19:29:23 +0200

apport (0.7) edgy; urgency=low

  * Add apport_utils.py: Factorize out some common code of apport-gtk,
    possible future frontends, and some backend tools.
  * Add apport-checkreports: Test if there are new crash reports for the
    invoking user. This factorizes out the tests we currently do in
    update-notifier and makes them easier to change and keep in sync with
    apport itself. Ship the script in the apport package.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Tue,  8 Aug 2006 17:24:46 +0200

apport (0.6) edgy; urgency=low

  * Add missing intltool build dependency to fix FTBFS.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Thu,  3 Aug 2006 09:15:42 +0200

apport (0.5) edgy; urgency=low

  * apport-gtk: Remove the crash report after it got displayed.
  * apport-gtk: Fix exception on startup if no readable crash reports exist.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Wed,  2 Aug 2006 23:42:34 +0200

apport (0.4) edgy; urgency=low

  * Implement completely new UI according to the design described at
    https://wiki.ubuntu.com/CrashReporting. Many thanks to Matthew Paul
    Thomas!
  * po/Makefile: Fix default target to not just break. Now it builds the .pot
    file.
  * debian/rules: Build .pot file on package build for automatic Rosetta
    import.
  * Bring German translations up to date.
  * po/Makefile: Supply '--language=python' to intltool-update to properly
    extract strings from apport-gtk.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Wed,  2 Aug 2006 23:14:58 +0200

apport (0.3) edgy; urgency=low

  * debian/rules clean: Also clean po/.
  * debian/apport.cron.daily: Clean away empty files everytime.
  * apport: Only consider a report as already present if it has a non-zero
    size.
  * apport: Set proper group for report files instead of 'root'.
  * apport-gtk: Ignore 0-sized reports.
  * apport-gtk: Add button to remove the current report (by truncating the
    file to zero bytes; a user cannot unlink files in /var/crash).
  * apport-gtk: Only display reports that the user can actually read.
  * problem_report.py: Add 'binary' option to ProblemReport.load() to
    optionally skip binary data.
  * debian/rules: Clean stale *.pyc files.
  * python-gtk: Do not load binary data (core dumps, etc.) to greatly speed up
    the GUI. They are just gibberish anyway.
  * apport: Switch from apt_pkg to apt, add SourcePackage: to reports.
  * apport-gtk: Use source package name for the Malone URL.
  * debian/rules: Call setup.py install with --no-compile to not ship *.pyc in
    debs.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Mon, 31 Jul 2006 13:11:52 +0200

apport (0.2) edgy; urgency=low

  * debian/apport.cron.daily: Do not produce error messages if 'find' does not
    find any crash reports.
  * problem_report.py: Support iterators, add test case.
  * apport: Filter out trailing 0-byte from ProcCmdline.
  * Add a simple GTK frontend, ship it in new package apport-gtk.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Thu, 27 Jul 2006 23:52:33 +0200

apport (0.1) edgy; urgency=low

  * Initial release. This package implements the client backend part of
    https://wiki.ubuntu.com/AutomatedProblemReports.

 -- Martin Pitt <martin.pitt@ubuntu.com>  Mon, 24 Jul 2006 14:21:10 +0200
