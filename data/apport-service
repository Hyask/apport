#!/usr/bin/python3

from gi.repository import GLib
import dbus
import dbus.service
import dbus.mainloop.glib
import apport
import os
import argparse

class Apport(dbus.service.Object):
    def __init__(self, bus):
        object_path = '/com/ubuntu/Apport'
        self.bus_name = dbus.service.BusName('com.ubuntu.Apport')
        self.bus = bus
        dbus.service.Object.__init__(self, bus, object_path)

    @dbus.service.method(
        'com.Ubuntu.Apport', in_signature='ssa{ss}', out_signature='',
        sender_keyword='sender')
    def RecoverableCrashReport(self, dialog_text, traceback, additional_keys, sender=None):
        if not sender:
            return

        # Find the process ID of the caller so that we can pull information
        # about this process out of /proc.
        obj = self.bus.get_object(dbus.BUS_DAEMON_IFACE, dbus.BUS_DAEMON_PATH)
        iface = dbus.Interface(obj, dbus.BUS_DAEMON_IFACE)
        pid = iface.GetConnectionUnixProcessID(sender)

        # Set up report.
        report = apport.Report('RecoverableCrash')
        report.add_proc_info(pid)
        report.add_package_info()

        report['DialogBody'] = dialog_text
        if traceback:
            if 'InterpreterPath' in report:
                report['Traceback'] = traceback
            else:
                report['Stacktrace'] = traceback

        for key in additional_keys:
            report[key] = additional_keys[key]

        path = report['ExecutablePath'].replace('/', '_')
        reportdir = apport.fileutils.report_dir
        reportfile = '%s/%s.%i.crash' % (reportdir, path, os.getuid())
        with open(reportfile, 'wb') as f:
            report.write(f)
                                         

def parse_argv():
    desc = 'Apport recoverable errors service'
    parser = argparse.ArgumentParser(description=desc)
    h = 'Timeout for D-BUS service (default: 600, 0: run forever)'
    parser.add_argument('--timeout', type=int, help=h)
    return parser.parse_args()

if __name__ == '__main__':
    args = parse_argv()

    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
    bus = dbus.SessionBus()
    Apport(bus)
    loop = GLib.MainLoop()
    if args.timeout:
        def _t():
            loop.quit()
            return True
        GLib.timeout_add(args.timeout * 1000, _t)
    try:
        loop.run()
    except KeyboardInterrupt:
        pass
