#!/usr/bin/python

# Use the coredump in a crash report to regenerate the stack traces. This is
# helpful to get a trace with debug symbols.
#
# Copyright (c) 2006 Canonical Ltd.
# Author: Martin Pitt <martin.pitt@ubuntu.com>
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.  See http://www.gnu.org/copyleft/gpl.html for
# the full text of the license.

import sys, os, os.path, subprocess, optparse
import problem_report, apport_utils

#
# functions
#

def parse_options():
    '''Parse command line options and return (reportfile, options) tuple.'''

    optparser = optparse.OptionParser('%prog [options] <apport problem report>')
    optparser.add_option('-c', '--remove-core', 
	help='Remove the core dump from the report after stack trace regeneration',
	action="store_true", dest="removecore", default=False)
    optparser.add_option('-s', '--stdout', 
	help='Do not put the new traces into the report, but write them to stdout.',
	action="store_true", dest="stdout", default=False)
    optparser.add_option('-o', '--output', 
	help='Write modified report to given file instead of changing the original report',
	action="store", type="string", dest="output", metavar="FILE", default=None)

    (opts, args) = optparser.parse_args()

    if len(args) != 1:
	optparser.error("incorrect number of arguments; use --help for a short online help")
	sys.exit(1)

    return (args[0], opts)


#
# main
#

(reportfile, options) = parse_options()

# load the report
report = problem_report.ProblemReport()
report.load(open(reportfile))

# sanity checks
if not report.has_key('CoreDump'):
    print >> sys.stderr, 'report file does not contain a core dump'
    sys.exit(1)
if not report.has_key('Package'):
    print >> sys.stderr, 'report file does not have Package attribute'
    sys.exit(1)

package = report['Package'].split()[0]
if subprocess.call(['dpkg', '-s', package], stdout=subprocess.PIPE, stderr=subprocess.PIPE) != 0:
    print >> sys.stderr, 'crash is in package %s which is not installed' % package
    sys.exit(1)

assert os.path.exists(report['ExecutablePath'])

# regenerate gdb info
apport_utils.report_add_gdb_info(report)

modified = False

if options.removecore:
    report['CoreDump'] = 'removed'
    modified = True

if options.stdout:
    print '--- stack trace ---'
    print report['Stacktrace']
    print '--- thread stack trace ---'
    print report['ThreadStacktrace']
else:
    modified = True

if modified:
    if options.output == None:
	out = open(reportfile, 'w')
    elif options.output == '-':
	out = sys.stdout
    else:
	out = open(options.output, 'w')

    report.write(out)
