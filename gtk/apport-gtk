#!/usr/bin/python
import gobject, gtk, gtk.glade
import glob, sys, gettext, os.path
from gettext import gettext as _
import webbrowser, subprocess

from problem_report import ProblemReport

gettext_domain = 'apport'

class ApportGTK:
    def __init__(self):
	self.widgets = gtk.glade.XML(os.path.join(os.path.dirname(sys.argv[0]),
	    'apport-gtk.glade'))
        self.widgets.signal_autoconnect(self)

	self.reports = [r for r in glob.glob('/var/crash/*.crash') if os.path.getsize(r) > 0]
	if len(self.reports) == 0:
	    print >> sys.stderr, 'No crash reports found, aborting'
	    gtk.main_quit()

	# initial tree model and view
	self.tree_model = gtk.TreeStore(gobject.TYPE_STRING)
	self.w('treeview_details').set_model(self.tree_model)

	column = gtk.TreeViewColumn("Report", gtk.CellRendererText(), text=0)
	self.w('treeview_details').append_column(column)

	self.cur_report = 0
	self.cur_package = None
	self.update_report()

    def quit(self, widget, *auxargs):
	gtk.main_quit()

    def w(self, widget):
	'''Shortcut for getting a widget.'''

	return self.widgets.get_widget(widget)

    def on_about_activate(self, widget):
	d = self.w('dialog_about')
	d.run()
	d.hide()

    def update_report(self):
	'''Load currently selected report and update UI accordingly.'''

	# load problem report
	report = ProblemReport()
	report.load(open(self.reports[self.cur_report]))

	# update general information
	self.w('label_crashed_program').set_text(report['ExecutablePath'])
	self.w('label_package').set_text(report['Package'])
	self.w('entry_report_file').set_text(self.reports[self.cur_report])
	self.cur_package = report['Package'].split()[0]

	# update details
	self.tree_model.clear()
	for key, row in zip(report, xrange(sys.maxint)):
	    keyiter = self.tree_model.insert_before(None, None)
	    self.tree_model.set_value(keyiter, 0, key)

	    valiter = self.tree_model.insert_before(keyiter, None)
	    self.tree_model.set_value(valiter, 0, report[key])

	    # expand the row if the value has less than 5 lines
	    if len(filter(lambda c: c == '\n', report[key])) < 4:
		self.w('treeview_details').expand_row(row, False)

	self.update_browse_buttons()

    def update_browse_buttons(self):
	'''Enable or disable back/forward buttons depending on which report is
	currently selected.'''

	if self.cur_report == 0:
	    self.w('button_prev').set_sensitive(False)
	else:
	    self.w('button_prev').set_sensitive(True)

	if self.cur_report == len(self.reports)-1:
	    self.w('button_next').set_sensitive(False)
	else:
	    self.w('button_next').set_sensitive(True)

    def on_button_prev_clicked(self, widget):
	if self.cur_report > 0:
	    self.cur_report -= 1
	    self.update_report()

    def on_button_next_clicked(self, widget):
	if self.cur_report < len(self.reports)-1:
	    self.cur_report += 1
	    self.update_report()

    def on_button_malone_clicked(self, widget):
	url = 'https://launchpad.net/distros/ubuntu/+source/%s/+bugs' % self.cur_package

	# prefer gnome-open if it exists
	try:
	    if subprocess.call(['gnome-open', url]) == 0:
		return
	except OSError:
	    pass

	webbrowser.open(url)

    def _del_report_file(self, f):
	'''Delete the given report file.

	Currently this happens by truncating the file to 0 byte, since users
	cannot remove files from /var/crash.'''

	open(f, 'w').truncate(0)

    def on_button_delete_clicked(self, widget):
	self._del_report_file(self.reports[self.cur_report])
	del self.reports[self.cur_report]

	if len(self.reports) <= 1:
	    gtk.main_quit()

	if self.cur_report < len(self.reports)-1:
	    self.cur_report += 1
	else:
	    self.cur_report -= 1
	self.update_report()

if __name__ == '__main__':
    gettext.textdomain(gettext_domain)
    gtk.glade.textdomain(gettext_domain)

    app = ApportGTK()
    gtk.main()

