#!/usr/bin/python
import gobject, gtk, gtk.glade
import glob, sys, gettext, os.path
from gettext import gettext as _
import webbrowser, subprocess

from problem_report import ProblemReport

gettext_domain = 'apport'

class ApportGTK:
    def __init__(self):
	self.widgets = gtk.glade.XML(os.path.join(os.path.dirname(sys.argv[0]),
	    'apport-gtk.glade'))
        self.widgets.signal_autoconnect(self)

	self.reports = [r for r in glob.glob('/var/crash/*.crash') 
	    if os.path.getsize(r) > 0 and os.access(r, os.R_OK)]
	if len(self.reports) == 0:
	    print >> sys.stderr, 'No crash reports found, aborting'
	    gtk.main_quit()

	# initialize tree model and view
	self.tree_model = gtk.TreeStore(gobject.TYPE_STRING)
	self.w('treeview_reportdetails').set_model(self.tree_model)

	column = gtk.TreeViewColumn("Report", gtk.CellRendererText(), text=0)
	self.w('treeview_reportdetails').append_column(column)

	# save the original strings of the dialog headings (which contain %s,
	# which we replace later)
	self.str_heading = self.w('label_heading').get_label()
	self.str_heading_reopen = self.w('label_heading_reopen').get_label()
	self.str_bugreport_title = self.w('window_bugreport').get_title()

	self.cur_source = None
	self.report = None
	self.update_report()

    def ignore(self, widget, *auxargs):
	'''Do nothing with the current report.'''

	self.w('dialog_crash').hide()
	self.w('dialog_crash_reopen').hide()
	self.next()
	return True

    def next(self):
	'''Move on to the next report.'''

	# delete the current report
	#open(self.reports.pop(0), 'w').truncate(0)
	self.reports.pop(0)
	self.report = None

	if len(self.reports) > 0:
	    self.update_report()
	else:
	    gtk.main_quit()

    def w(self, widget):
	'''Shortcut for getting a widget.'''

	return self.widgets.get_widget(widget)

    def update_report(self):
	'''Load currently selected report and update UI accordingly.'''

	# load problem report
	self.report = ProblemReport()
	self.report.load(open(self.reports[0]), binary=False)

	try:
	    self.cur_source = self.report['SourcePackage']
	except KeyError:
	    self.cur_source = self.report['Package'].split()[0]

	# update dialog
	label = self.w('label_heading')
	label.set_markup(self.str_heading %
	    os.path.basename(self.report['ExecutablePath']))

	self.w('dialog_crash').show_all()

    def on_button_reportbug_clicked(self, widget):
	'''Open bug page in browser and ask to file a bug.'''

	assert self.report

	self.w('dialog_crash').hide()
	self.w('dialog_crash_reopen').hide()

	url = 'https://launchpad.net/distros/ubuntu/+source/%s/+bugs' % self.cur_source

	# update details
	self.w('window_bugreport').set_title(self.str_bugreport_title %
	    self.report['Package'].split()[0])

	self.w('label_reportfile').set_text(self.reports[0])
	self.w('label_reportfile').set_selectable(True)

	self.tree_model.clear()
	for key, row in zip(self.report, xrange(sys.maxint)):
	    keyiter = self.tree_model.insert_before(None, None)
	    self.tree_model.set_value(keyiter, 0, key)

	    valiter = self.tree_model.insert_before(keyiter, None)
	    if self.report[key]:
		self.tree_model.set_value(valiter, 0, self.report[key])
	    else:
		self.tree_model.set_value(valiter, 0, '(binary data)')

	    # expand the row if the value has less than 5 lines
	    if len(filter(lambda c: c == '\n', self.report[key])) < 4:
		self.w('treeview_reportdetails').expand_row(row, False)

	self.w('window_bugreport').show_all()

	# prefer gnome-open if it exists
	try:
	    if subprocess.call(['gnome-open', url]) == 0:
		return
	except OSError:
	    pass

	webbrowser.open(url)
	return True

    def on_window_bugreport_delete_event(self, widget, event):
	self.w('window_bugreport').hide()
	self.next()
	return True

if __name__ == '__main__':
    gettext.textdomain(gettext_domain)
    gtk.glade.textdomain(gettext_domain)

    app = ApportGTK()
    gtk.main()

